import re
import string
import sqlite3
import threading
import os

from flask import Flask
from flask_admin import Admin
from flask_admin.contrib.sqla import ModelView
from flask_sqlalchemy import SQLAlchemy
from flask_basicauth import BasicAuth
from waitress import serve

from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from rapidfuzz import process, fuzz

########################################
# –ó–ê–î–ê–Å–ú –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –û–ü–ï–†–ê–¢–û–†–û–í
########################################

ADMIN_CHAT_ID = -4713749199  # <-- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:
# pending_operator: –∫–ª—é—á ‚Äì user_id, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì None (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω) –∏–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤.
pending_operator = {}
# –û–±—Ä–∞—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –∫–ª—é—á ‚Äì ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì user_id
operator_admin_to_user = {}

########################################
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø–∞–Ω–µ–ª–∏ (Flask + Admin)
########################################

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–∞–∑–∞ –≤ –ø–∞–ø–∫–µ database, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–π –≤ –∫–æ—Ä–Ω–µ)
web_app = Flask(__name__)
web_app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
web_app.secret_key = 'supersecretkey'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
web_app.config['BASIC_AUTH_USERNAME'] = 'admin'
web_app.config['BASIC_AUTH_PASSWORD'] = 'faqIHf4u8sdfj'
web_app.config['BASIC_AUTH_FORCE'] = True  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞—â–∏—â–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã

basic_auth = BasicAuth(web_app)

# –ü–∞–ø–∫–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
db_folder = os.path.join(os.getcwd(), "database")
os.makedirs(db_folder, exist_ok=True)
db_file = os.path.join(db_folder, "faq_database.db")
web_app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{db_file}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLAlchemy
db = SQLAlchemy(web_app)

# –ú–æ–¥–µ–ª—å FAQ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
class FAQ(db.Model):
    __tablename__ = 'faq'
    id = db.Column(db.Integer, primary_key=True)
    question = db.Column(db.Text, unique=True, nullable=False)
    answer = db.Column(db.Text, nullable=False)

    def __str__(self):
        return self.question

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
with web_app.app_context():
    db.create_all()

# –ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ FAQ (–≤—Å–µ –Ω–∞–¥–ø–∏—Å–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π, —Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã)
class FAQModelView(ModelView):
    create_modal = False  # –∏—Å–ø–æ–ª—å–∑—É–µ–º ¬´—Å—Ç–∞—Ä—ã–π¬ª —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    edit_modal = False    # –∏—Å–ø–æ–ª—å–∑—É–µ–º ¬´—Å—Ç–∞—Ä—ã–π¬ª —Å–ø–æ—Å–æ–± —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    can_view_details = True

    column_labels = {
        'id': 'ID',
        'question': '–í–æ–ø—Ä–æ—Å',
        'answer': '–û—Ç–≤–µ—Ç'
    }
    column_searchable_list = ['question', 'answer']
    column_sortable_list = ['id', 'question']
    # –§–∏–ª—å—Ç—Ä—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

    page_size = 20

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-Admin (–∞–¥–º–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É http://zrkbot.ru)
admin = Admin(web_app, name='–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ FAQ', template_mode='bootstrap3')
admin.add_view(FAQModelView(FAQ, db.session, name='FAQ'))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ production‚ÄëWSGI —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é Waitress
def run_flask():
    serve(web_app, host="0.0.0.0", port=5000)

########################################
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ
########################################

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
def search_normalize(text):
    translator = str.maketrans('', '', string.punctuation)
    return text.translate(translator).lower().strip()

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤)
def display_normalize(text):
    return text.strip()

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Å–ª–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
def extract_candidate_codes(text):
    pattern = r'\b(?=\w*[A-Za-z])(?=\w*\d)\w+\b'
    return re.findall(pattern, text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —Å—Å—ã–ª–∫–æ–π –Ω–∞ .mp4
def is_mp4_link(text):
    return bool(re.fullmatch(r'https?://\S+\.mp4', text.strip()))

# –ó–∞–≥—Ä—É–∑–∫–∞ FAQ-–¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
def load_faq_data():
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT question, answer FROM faq")
    except sqlite3.OperationalError:
        conn.close()
        return []
    data = [(display_normalize(q), a) for q, a in cursor.fetchall()]
    conn.close()
    return data

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞
def get_faq_mappings():
    faq_data = load_faq_data()
    faq_dict = {q: a for q, a in faq_data}
    norm_to_orig = {search_normalize(q): q for q in faq_dict.keys()}
    normalized_questions = list(norm_to_orig.keys())
    return faq_dict, norm_to_orig, normalized_questions

# –ü–æ–∏—Å–∫ –ø–æ FAQ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
def search_faq(query, threshold=75):
    faq_dict, norm_to_orig, normalized_questions = get_faq_mappings()
    query_norm = search_normalize(query)
    print(f"üîç –ò—â—É (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞): '{query_norm}'")

    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if query_norm in norm_to_orig:
        orig_q = norm_to_orig[query_norm]
        print(f"‚úÖ –ù–∞—à–µ–ª —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{orig_q}'")
        return orig_q, faq_dict[orig_q], 100

    # –ü–æ–∏—Å–∫ –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é
    for norm_q in normalized_questions:
        if query_norm in norm_q or norm_q in query_norm:
            orig_q = norm_to_orig[norm_q]
            print(f"‚úÖ –ù–∞—à–µ–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é: '{orig_q}'")
            return orig_q, faq_dict[orig_q], 100

    # –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫
    best_match = process.extractOne(query_norm, normalized_questions, scorer=fuzz.partial_ratio, score_cutoff=threshold)
    if best_match:
        matched_norm, score = best_match[:2]
        orig_q = norm_to_orig[matched_norm]
        print(f"üßê –ù–∞—à–µ–ª –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å: '{orig_q}' (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {score}%)")
        return orig_q, faq_dict[orig_q], score

    # –ü–æ–∏—Å–∫ –ø–æ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º –∫–æ–¥–∞–º
    candidate_codes = extract_candidate_codes(query)
    if candidate_codes:
        print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–¥—ã: {candidate_codes}")
        for code in candidate_codes:
            code_norm = search_normalize(code)
            for norm_q in normalized_questions:
                if code_norm in norm_q:
                    orig_q = norm_to_orig[norm_q]
                    print(f"‚úÖ –ù–∞—à–µ–ª –ø–æ –∫–æ–¥—É '{code}': '{orig_q}'")
                    return orig_q, faq_dict[orig_q], 100
            best_match = process.extractOne(code_norm, normalized_questions, scorer=fuzz.partial_ratio,
                                            score_cutoff=threshold)
            if best_match:
                matched_norm, score = best_match[:2]
                orig_q = norm_to_orig[matched_norm]
                print(f"üßê –ù–∞—à–µ–ª –ø–æ –∫–æ–¥—É '{code}': '{orig_q}' (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {score}%)")
                return orig_q, faq_dict[orig_q], score

    print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return None, None, None

########################################
# Telegram-–±–æ—Ç –Ω–∞ Pyrogram
########################################

app_bot = Client(
    "faq_bot",
    api_id=22806579,
    api_hash="e455bdf231f1bcdba4bcf98423ddcae0",
    bot_token="7790967506:AAGzDLB6apodMF_RTZQsHeCmZ_6L0GDch4Y"
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ callback (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É)
@app_bot.on_callback_query(filters.regex("call_operator"))
async def call_operator_callback(client, callback_query):
    user_id = callback_query.from_user.id
    if user_id in pending_operator:
        await callback_query.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
        return
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: –∑–Ω–∞—á–µ–Ω–∏–µ None –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã–∑–≤–∞–Ω, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
    pending_operator[user_id] = None
    await callback_query.answer("–û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã–∑–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)", show_alert=True)
    await client.send_message(callback_query.from_user.id,
                              "–û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã–∑–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.
# –ì—Ä—É–ø–ø–∞ 0 ‚Äì –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.
@app_bot.on_message(filters.private & ~filters.command("start"), group=0)
async def operator_request_handler(client, message):
    user_id = message.chat.id
    if user_id in pending_operator:
        if pending_operator[user_id] is None:
            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç)
            forwarded_msg = await client.forward_messages(
                chat_id=ADMIN_CHAT_ID,
                from_chat_id=user_id,
                message_ids=message.id
            )
            pending_operator[user_id] = forwarded_msg.id
            operator_admin_to_user[forwarded_msg.id] = user_id
            await client.send_message(user_id, "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        else:
            await client.send_message(user_id, "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
        return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ FAQ-–∑–∞–ø—Ä–æ—Å–æ–≤.
# –ì—Ä—É–ø–ø–∞ 1 ‚Äì –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.
@app_bot.on_message(filters.text & ~filters.command("start") & filters.private, group=1)
async def handle_question(client, message):
    user_id = message.chat.id
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–∑–≤–∞–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ FAQ-–∑–∞–ø—Ä–æ—Å
    if user_id in pending_operator:
        return

    user_question = message.text
    chat_id = message.chat.id

    matched_question, answer, similarity = search_faq(user_question)

    if answer:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç ‚Äì —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ .mp4
        if is_mp4_link(answer):
            try:
                await client.send_video(chat_id, answer, caption="üé• –í–∏–¥–µ–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:")
                print("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
                await client.send_message(chat_id, f"üîó –í–∏–¥–µ–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É: {answer}")
                return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–í—ã–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
        await client.send_message(
            chat_id,
            f"üßê –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n"
            f"**–û—Ç–≤–µ—Ç:** {answer}\n"
            "–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–æ, —á—Ç–æ –≤—ã –∏—Å–∫–∞–ª–∏, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–í—ã–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="call_operator")]
            ])
        )
    else:
        await client.send_message(
            chat_id,
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–í—ã–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="call_operator")]
            ])
        )

@app_bot.on_message(filters.command("start") & filters.private)
async def start(client, message):
    await message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤–∞–º –ø–æ–º–æ—á—å.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞–ø–∏—à–∏—Ç–µ \"–û—à–∏–±–∫–∞ APK36651065\" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–¥ \"APK36651065\".\n\n"
        "–ï—Å–ª–∏ –≤–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–í—ã–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞¬ª."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.
# –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ ADMIN_CHAT_ID –æ—Ç–≤–µ—á–∞–µ—Ç (reply) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –±–æ—Ç–æ–º, –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –¥–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
@app_bot.on_message(filters.chat(ADMIN_CHAT_ID) & filters.reply)
async def operator_reply_handler(client, message):
    replied_msg = message.reply_to_message
    if replied_msg and replied_msg.id in operator_admin_to_user:
        user_id = operator_admin_to_user[replied_msg.id]
        if message.photo:
            await client.send_photo(user_id, message.photo.file_id, caption=message.caption or "–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:")
        else:
            await client.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
        # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        await client.send_message(ADMIN_CHAT_ID, f"–î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∑–∞–∫—Ä—ã—Ç.")
        del pending_operator[user_id]
        del operator_admin_to_user[replied_msg.id]

########################################
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-–ø–∞–Ω–µ–ª–∏
########################################

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø–∞–Ω–µ–ª—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–∞–¥–º–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É http://zrkbot.ru)
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    app_bot.run()
